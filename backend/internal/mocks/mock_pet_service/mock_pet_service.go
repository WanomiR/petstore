// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	entities "backend/internal/modules/pet/entities"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPetServicer is a mock of PetServicer interface.
type MockPetServicer struct {
	ctrl     *gomock.Controller
	recorder *MockPetServicerMockRecorder
}

// MockPetServicerMockRecorder is the mock recorder for MockPetServicer.
type MockPetServicerMockRecorder struct {
	mock *MockPetServicer
}

// NewMockPetServicer creates a new mock instance.
func NewMockPetServicer(ctrl *gomock.Controller) *MockPetServicer {
	mock := &MockPetServicer{ctrl: ctrl}
	mock.recorder = &MockPetServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPetServicer) EXPECT() *MockPetServicerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPetServicer) Create(ctx context.Context, pet entities.Pet) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, pet)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPetServicerMockRecorder) Create(ctx, pet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPetServicer)(nil).Create), ctx, pet)
}

// Delete mocks base method.
func (m *MockPetServicer) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPetServicerMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPetServicer)(nil).Delete), ctx, id)
}

// GetById mocks base method.
func (m *MockPetServicer) GetById(ctx context.Context, id int) (entities.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(entities.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockPetServicerMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockPetServicer)(nil).GetById), ctx, id)
}

// GetByStatus mocks base method.
func (m *MockPetServicer) GetByStatus(ctx context.Context, status string) ([]entities.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStatus", ctx, status)
	ret0, _ := ret[0].([]entities.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStatus indicates an expected call of GetByStatus.
func (mr *MockPetServicerMockRecorder) GetByStatus(ctx, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStatus", reflect.TypeOf((*MockPetServicer)(nil).GetByStatus), ctx, status)
}

// Update mocks base method.
func (m *MockPetServicer) Update(ctx context.Context, pet entities.Pet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, pet)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPetServicerMockRecorder) Update(ctx, pet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPetServicer)(nil).Update), ctx, pet)
}

// UpdateWithForm mocks base method.
func (m *MockPetServicer) UpdateWithForm(ctx context.Context, id int, name, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWithForm", ctx, id, name, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWithForm indicates an expected call of UpdateWithForm.
func (mr *MockPetServicerMockRecorder) UpdateWithForm(ctx, id, name, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWithForm", reflect.TypeOf((*MockPetServicer)(nil).UpdateWithForm), ctx, id, name, status)
}
