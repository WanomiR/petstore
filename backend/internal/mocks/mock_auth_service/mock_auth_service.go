// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	entities "backend/internal/modules/auth/entities"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthServicer is a mock of AuthServicer interface.
type MockAuthServicer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServicerMockRecorder
}

// MockAuthServicerMockRecorder is the mock recorder for MockAuthServicer.
type MockAuthServicerMockRecorder struct {
	mock *MockAuthServicer
}

// NewMockAuthServicer creates a new mock instance.
func NewMockAuthServicer(ctrl *gomock.Controller) *MockAuthServicer {
	mock := &MockAuthServicer{ctrl: ctrl}
	mock.recorder = &MockAuthServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthServicer) EXPECT() *MockAuthServicerMockRecorder {
	return m.recorder
}

// CreateCookie mocks base method.
func (m *MockAuthServicer) CreateCookie(refreshToken string) *http.Cookie {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCookie", refreshToken)
	ret0, _ := ret[0].(*http.Cookie)
	return ret0
}

// CreateCookie indicates an expected call of CreateCookie.
func (mr *MockAuthServicerMockRecorder) CreateCookie(refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCookie", reflect.TypeOf((*MockAuthServicer)(nil).CreateCookie), refreshToken)
}

// CreateExpiredCookie mocks base method.
func (m *MockAuthServicer) CreateExpiredCookie() *http.Cookie {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExpiredCookie")
	ret0, _ := ret[0].(*http.Cookie)
	return ret0
}

// CreateExpiredCookie indicates an expected call of CreateExpiredCookie.
func (mr *MockAuthServicerMockRecorder) CreateExpiredCookie() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExpiredCookie", reflect.TypeOf((*MockAuthServicer)(nil).CreateExpiredCookie))
}

// EncryptPassword mocks base method.
func (m *MockAuthServicer) EncryptPassword(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncryptPassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncryptPassword indicates an expected call of EncryptPassword.
func (mr *MockAuthServicerMockRecorder) EncryptPassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptPassword", reflect.TypeOf((*MockAuthServicer)(nil).EncryptPassword), password)
}

// GenerateToken mocks base method.
func (m *MockAuthServicer) GenerateToken(subject string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", subject)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthServicerMockRecorder) GenerateToken(subject interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthServicer)(nil).GenerateToken), subject)
}

// VerifyPassword mocks base method.
func (m *MockAuthServicer) VerifyPassword(password, encryptedPassword string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyPassword", password, encryptedPassword)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyPassword indicates an expected call of VerifyPassword.
func (mr *MockAuthServicerMockRecorder) VerifyPassword(password, encryptedPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyPassword", reflect.TypeOf((*MockAuthServicer)(nil).VerifyPassword), password, encryptedPassword)
}

// VerifyRequest mocks base method.
func (m *MockAuthServicer) VerifyRequest(w http.ResponseWriter, r *http.Request) (string, *entities.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyRequest", w, r)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*entities.Claims)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// VerifyRequest indicates an expected call of VerifyRequest.
func (mr *MockAuthServicerMockRecorder) VerifyRequest(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyRequest", reflect.TypeOf((*MockAuthServicer)(nil).VerifyRequest), w, r)
}
