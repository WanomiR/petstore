// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	entities "backend/internal/modules/pet/entities"
	entities0 "backend/internal/modules/store/entities"
	entities1 "backend/internal/modules/user/entities"
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Connection mocks base method.
func (m *MockRepository) Connection() *sql.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connection")
	ret0, _ := ret[0].(*sql.DB)
	return ret0
}

// Connection indicates an expected call of Connection.
func (mr *MockRepositoryMockRecorder) Connection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connection", reflect.TypeOf((*MockRepository)(nil).Connection))
}

// CreateOrder mocks base method.
func (m *MockRepository) CreateOrder(ctx context.Context, order entities0.Order) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, order)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockRepositoryMockRecorder) CreateOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockRepository)(nil).CreateOrder), ctx, order)
}

// CreatePet mocks base method.
func (m *MockRepository) CreatePet(ctx context.Context, categoryId int, petName, petStatus string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePet", ctx, categoryId, petName, petStatus)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePet indicates an expected call of CreatePet.
func (mr *MockRepositoryMockRecorder) CreatePet(ctx, categoryId, petName, petStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePet", reflect.TypeOf((*MockRepository)(nil).CreatePet), ctx, categoryId, petName, petStatus)
}

// CreatePetCategory mocks base method.
func (m *MockRepository) CreatePetCategory(ctx context.Context, categoryName string) (entities.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePetCategory", ctx, categoryName)
	ret0, _ := ret[0].(entities.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePetCategory indicates an expected call of CreatePetCategory.
func (mr *MockRepositoryMockRecorder) CreatePetCategory(ctx, categoryName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePetCategory", reflect.TypeOf((*MockRepository)(nil).CreatePetCategory), ctx, categoryName)
}

// CreatePetPhotoUrl mocks base method.
func (m *MockRepository) CreatePetPhotoUrl(ctx context.Context, petId int, photoUrl string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePetPhotoUrl", ctx, petId, photoUrl)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePetPhotoUrl indicates an expected call of CreatePetPhotoUrl.
func (mr *MockRepositoryMockRecorder) CreatePetPhotoUrl(ctx, petId, photoUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePetPhotoUrl", reflect.TypeOf((*MockRepository)(nil).CreatePetPhotoUrl), ctx, petId, photoUrl)
}

// CreatePetTagPair mocks base method.
func (m *MockRepository) CreatePetTagPair(ctx context.Context, petId, tagId int) (entities.PetTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePetTagPair", ctx, petId, tagId)
	ret0, _ := ret[0].(entities.PetTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePetTagPair indicates an expected call of CreatePetTagPair.
func (mr *MockRepositoryMockRecorder) CreatePetTagPair(ctx, petId, tagId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePetTagPair", reflect.TypeOf((*MockRepository)(nil).CreatePetTagPair), ctx, petId, tagId)
}

// CreateTag mocks base method.
func (m *MockRepository) CreateTag(ctx context.Context, tagName string) (entities.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTag", ctx, tagName)
	ret0, _ := ret[0].(entities.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTag indicates an expected call of CreateTag.
func (mr *MockRepositoryMockRecorder) CreateTag(ctx, tagName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockRepository)(nil).CreateTag), ctx, tagName)
}

// CreateUser mocks base method.
func (m *MockRepository) CreateUser(ctx context.Context, user entities1.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepository)(nil).CreateUser), ctx, user)
}

// DeleteOrder mocks base method.
func (m *MockRepository) DeleteOrder(ctx context.Context, orderId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", ctx, orderId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockRepositoryMockRecorder) DeleteOrder(ctx, orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockRepository)(nil).DeleteOrder), ctx, orderId)
}

// DeletePet mocks base method.
func (m *MockRepository) DeletePet(ctx context.Context, petId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePet", ctx, petId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePet indicates an expected call of DeletePet.
func (mr *MockRepositoryMockRecorder) DeletePet(ctx, petId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePet", reflect.TypeOf((*MockRepository)(nil).DeletePet), ctx, petId)
}

// DeletePetTagsByPetId mocks base method.
func (m *MockRepository) DeletePetTagsByPetId(ctx context.Context, petId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePetTagsByPetId", ctx, petId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePetTagsByPetId indicates an expected call of DeletePetTagsByPetId.
func (mr *MockRepositoryMockRecorder) DeletePetTagsByPetId(ctx, petId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePetTagsByPetId", reflect.TypeOf((*MockRepository)(nil).DeletePetTagsByPetId), ctx, petId)
}

// DeletePhotoUrlsByPetId mocks base method.
func (m *MockRepository) DeletePhotoUrlsByPetId(ctx context.Context, petId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePhotoUrlsByPetId", ctx, petId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePhotoUrlsByPetId indicates an expected call of DeletePhotoUrlsByPetId.
func (mr *MockRepositoryMockRecorder) DeletePhotoUrlsByPetId(ctx, petId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePhotoUrlsByPetId", reflect.TypeOf((*MockRepository)(nil).DeletePhotoUrlsByPetId), ctx, petId)
}

// DeleteUser mocks base method.
func (m *MockRepository) DeleteUser(ctx context.Context, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockRepositoryMockRecorder) DeleteUser(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockRepository)(nil).DeleteUser), ctx, username)
}

// GetOrderById mocks base method.
func (m *MockRepository) GetOrderById(ctx context.Context, orderId int) (entities0.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderById", ctx, orderId)
	ret0, _ := ret[0].(entities0.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderById indicates an expected call of GetOrderById.
func (mr *MockRepositoryMockRecorder) GetOrderById(ctx, orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderById", reflect.TypeOf((*MockRepository)(nil).GetOrderById), ctx, orderId)
}

// GetPetById mocks base method.
func (m *MockRepository) GetPetById(ctx context.Context, petId int) (entities.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPetById", ctx, petId)
	ret0, _ := ret[0].(entities.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPetById indicates an expected call of GetPetById.
func (mr *MockRepositoryMockRecorder) GetPetById(ctx, petId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPetById", reflect.TypeOf((*MockRepository)(nil).GetPetById), ctx, petId)
}

// GetPetCategoryById mocks base method.
func (m *MockRepository) GetPetCategoryById(ctx context.Context, categoryId int) (entities.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPetCategoryById", ctx, categoryId)
	ret0, _ := ret[0].(entities.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPetCategoryById indicates an expected call of GetPetCategoryById.
func (mr *MockRepositoryMockRecorder) GetPetCategoryById(ctx, categoryId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPetCategoryById", reflect.TypeOf((*MockRepository)(nil).GetPetCategoryById), ctx, categoryId)
}

// GetPetCategoryByName mocks base method.
func (m *MockRepository) GetPetCategoryByName(ctx context.Context, categoryName string) (entities.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPetCategoryByName", ctx, categoryName)
	ret0, _ := ret[0].(entities.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPetCategoryByName indicates an expected call of GetPetCategoryByName.
func (mr *MockRepositoryMockRecorder) GetPetCategoryByName(ctx, categoryName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPetCategoryByName", reflect.TypeOf((*MockRepository)(nil).GetPetCategoryByName), ctx, categoryName)
}

// GetPetTagPair mocks base method.
func (m *MockRepository) GetPetTagPair(ctx context.Context, petId, tagId int) (entities.PetTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPetTagPair", ctx, petId, tagId)
	ret0, _ := ret[0].(entities.PetTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPetTagPair indicates an expected call of GetPetTagPair.
func (mr *MockRepositoryMockRecorder) GetPetTagPair(ctx, petId, tagId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPetTagPair", reflect.TypeOf((*MockRepository)(nil).GetPetTagPair), ctx, petId, tagId)
}

// GetPetTagPairsByPetId mocks base method.
func (m *MockRepository) GetPetTagPairsByPetId(ctx context.Context, petId int) ([]entities.PetTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPetTagPairsByPetId", ctx, petId)
	ret0, _ := ret[0].([]entities.PetTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPetTagPairsByPetId indicates an expected call of GetPetTagPairsByPetId.
func (mr *MockRepositoryMockRecorder) GetPetTagPairsByPetId(ctx, petId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPetTagPairsByPetId", reflect.TypeOf((*MockRepository)(nil).GetPetTagPairsByPetId), ctx, petId)
}

// GetPetsByStatus mocks base method.
func (m *MockRepository) GetPetsByStatus(ctx context.Context, petStatus string) ([]entities.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPetsByStatus", ctx, petStatus)
	ret0, _ := ret[0].([]entities.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPetsByStatus indicates an expected call of GetPetsByStatus.
func (mr *MockRepositoryMockRecorder) GetPetsByStatus(ctx, petStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPetsByStatus", reflect.TypeOf((*MockRepository)(nil).GetPetsByStatus), ctx, petStatus)
}

// GetPhotoUrlsByPetId mocks base method.
func (m *MockRepository) GetPhotoUrlsByPetId(ctx context.Context, petId int) ([]entities.PhotoUrl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhotoUrlsByPetId", ctx, petId)
	ret0, _ := ret[0].([]entities.PhotoUrl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPhotoUrlsByPetId indicates an expected call of GetPhotoUrlsByPetId.
func (mr *MockRepositoryMockRecorder) GetPhotoUrlsByPetId(ctx, petId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhotoUrlsByPetId", reflect.TypeOf((*MockRepository)(nil).GetPhotoUrlsByPetId), ctx, petId)
}

// GetTagById mocks base method.
func (m *MockRepository) GetTagById(ctx context.Context, tagId int) (entities.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagById", ctx, tagId)
	ret0, _ := ret[0].(entities.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagById indicates an expected call of GetTagById.
func (mr *MockRepositoryMockRecorder) GetTagById(ctx, tagId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagById", reflect.TypeOf((*MockRepository)(nil).GetTagById), ctx, tagId)
}

// GetTagByName mocks base method.
func (m *MockRepository) GetTagByName(ctx context.Context, tagName string) (entities.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagByName", ctx, tagName)
	ret0, _ := ret[0].(entities.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagByName indicates an expected call of GetTagByName.
func (mr *MockRepositoryMockRecorder) GetTagByName(ctx, tagName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagByName", reflect.TypeOf((*MockRepository)(nil).GetTagByName), ctx, tagName)
}

// GetUserByUsername mocks base method.
func (m *MockRepository) GetUserByUsername(ctx context.Context, username string) (entities1.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, username)
	ret0, _ := ret[0].(entities1.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockRepositoryMockRecorder) GetUserByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockRepository)(nil).GetUserByUsername), ctx, username)
}

// UpdatePet mocks base method.
func (m *MockRepository) UpdatePet(ctx context.Context, pet entities.Pet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePet", ctx, pet)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePet indicates an expected call of UpdatePet.
func (mr *MockRepositoryMockRecorder) UpdatePet(ctx, pet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePet", reflect.TypeOf((*MockRepository)(nil).UpdatePet), ctx, pet)
}

// UpdateUser mocks base method.
func (m *MockRepository) UpdateUser(ctx context.Context, user entities1.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockRepositoryMockRecorder) UpdateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockRepository)(nil).UpdateUser), ctx, user)
}

// MockPetRepository is a mock of PetRepository interface.
type MockPetRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPetRepositoryMockRecorder
}

// MockPetRepositoryMockRecorder is the mock recorder for MockPetRepository.
type MockPetRepositoryMockRecorder struct {
	mock *MockPetRepository
}

// NewMockPetRepository creates a new mock instance.
func NewMockPetRepository(ctrl *gomock.Controller) *MockPetRepository {
	mock := &MockPetRepository{ctrl: ctrl}
	mock.recorder = &MockPetRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPetRepository) EXPECT() *MockPetRepositoryMockRecorder {
	return m.recorder
}

// CreatePet mocks base method.
func (m *MockPetRepository) CreatePet(ctx context.Context, categoryId int, petName, petStatus string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePet", ctx, categoryId, petName, petStatus)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePet indicates an expected call of CreatePet.
func (mr *MockPetRepositoryMockRecorder) CreatePet(ctx, categoryId, petName, petStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePet", reflect.TypeOf((*MockPetRepository)(nil).CreatePet), ctx, categoryId, petName, petStatus)
}

// CreatePetCategory mocks base method.
func (m *MockPetRepository) CreatePetCategory(ctx context.Context, categoryName string) (entities.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePetCategory", ctx, categoryName)
	ret0, _ := ret[0].(entities.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePetCategory indicates an expected call of CreatePetCategory.
func (mr *MockPetRepositoryMockRecorder) CreatePetCategory(ctx, categoryName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePetCategory", reflect.TypeOf((*MockPetRepository)(nil).CreatePetCategory), ctx, categoryName)
}

// CreatePetPhotoUrl mocks base method.
func (m *MockPetRepository) CreatePetPhotoUrl(ctx context.Context, petId int, photoUrl string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePetPhotoUrl", ctx, petId, photoUrl)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePetPhotoUrl indicates an expected call of CreatePetPhotoUrl.
func (mr *MockPetRepositoryMockRecorder) CreatePetPhotoUrl(ctx, petId, photoUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePetPhotoUrl", reflect.TypeOf((*MockPetRepository)(nil).CreatePetPhotoUrl), ctx, petId, photoUrl)
}

// CreatePetTagPair mocks base method.
func (m *MockPetRepository) CreatePetTagPair(ctx context.Context, petId, tagId int) (entities.PetTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePetTagPair", ctx, petId, tagId)
	ret0, _ := ret[0].(entities.PetTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePetTagPair indicates an expected call of CreatePetTagPair.
func (mr *MockPetRepositoryMockRecorder) CreatePetTagPair(ctx, petId, tagId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePetTagPair", reflect.TypeOf((*MockPetRepository)(nil).CreatePetTagPair), ctx, petId, tagId)
}

// CreateTag mocks base method.
func (m *MockPetRepository) CreateTag(ctx context.Context, tagName string) (entities.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTag", ctx, tagName)
	ret0, _ := ret[0].(entities.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTag indicates an expected call of CreateTag.
func (mr *MockPetRepositoryMockRecorder) CreateTag(ctx, tagName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockPetRepository)(nil).CreateTag), ctx, tagName)
}

// DeletePet mocks base method.
func (m *MockPetRepository) DeletePet(ctx context.Context, petId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePet", ctx, petId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePet indicates an expected call of DeletePet.
func (mr *MockPetRepositoryMockRecorder) DeletePet(ctx, petId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePet", reflect.TypeOf((*MockPetRepository)(nil).DeletePet), ctx, petId)
}

// DeletePetTagsByPetId mocks base method.
func (m *MockPetRepository) DeletePetTagsByPetId(ctx context.Context, petId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePetTagsByPetId", ctx, petId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePetTagsByPetId indicates an expected call of DeletePetTagsByPetId.
func (mr *MockPetRepositoryMockRecorder) DeletePetTagsByPetId(ctx, petId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePetTagsByPetId", reflect.TypeOf((*MockPetRepository)(nil).DeletePetTagsByPetId), ctx, petId)
}

// DeletePhotoUrlsByPetId mocks base method.
func (m *MockPetRepository) DeletePhotoUrlsByPetId(ctx context.Context, petId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePhotoUrlsByPetId", ctx, petId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePhotoUrlsByPetId indicates an expected call of DeletePhotoUrlsByPetId.
func (mr *MockPetRepositoryMockRecorder) DeletePhotoUrlsByPetId(ctx, petId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePhotoUrlsByPetId", reflect.TypeOf((*MockPetRepository)(nil).DeletePhotoUrlsByPetId), ctx, petId)
}

// GetPetById mocks base method.
func (m *MockPetRepository) GetPetById(ctx context.Context, petId int) (entities.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPetById", ctx, petId)
	ret0, _ := ret[0].(entities.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPetById indicates an expected call of GetPetById.
func (mr *MockPetRepositoryMockRecorder) GetPetById(ctx, petId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPetById", reflect.TypeOf((*MockPetRepository)(nil).GetPetById), ctx, petId)
}

// GetPetCategoryById mocks base method.
func (m *MockPetRepository) GetPetCategoryById(ctx context.Context, categoryId int) (entities.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPetCategoryById", ctx, categoryId)
	ret0, _ := ret[0].(entities.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPetCategoryById indicates an expected call of GetPetCategoryById.
func (mr *MockPetRepositoryMockRecorder) GetPetCategoryById(ctx, categoryId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPetCategoryById", reflect.TypeOf((*MockPetRepository)(nil).GetPetCategoryById), ctx, categoryId)
}

// GetPetCategoryByName mocks base method.
func (m *MockPetRepository) GetPetCategoryByName(ctx context.Context, categoryName string) (entities.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPetCategoryByName", ctx, categoryName)
	ret0, _ := ret[0].(entities.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPetCategoryByName indicates an expected call of GetPetCategoryByName.
func (mr *MockPetRepositoryMockRecorder) GetPetCategoryByName(ctx, categoryName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPetCategoryByName", reflect.TypeOf((*MockPetRepository)(nil).GetPetCategoryByName), ctx, categoryName)
}

// GetPetTagPair mocks base method.
func (m *MockPetRepository) GetPetTagPair(ctx context.Context, petId, tagId int) (entities.PetTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPetTagPair", ctx, petId, tagId)
	ret0, _ := ret[0].(entities.PetTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPetTagPair indicates an expected call of GetPetTagPair.
func (mr *MockPetRepositoryMockRecorder) GetPetTagPair(ctx, petId, tagId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPetTagPair", reflect.TypeOf((*MockPetRepository)(nil).GetPetTagPair), ctx, petId, tagId)
}

// GetPetTagPairsByPetId mocks base method.
func (m *MockPetRepository) GetPetTagPairsByPetId(ctx context.Context, petId int) ([]entities.PetTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPetTagPairsByPetId", ctx, petId)
	ret0, _ := ret[0].([]entities.PetTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPetTagPairsByPetId indicates an expected call of GetPetTagPairsByPetId.
func (mr *MockPetRepositoryMockRecorder) GetPetTagPairsByPetId(ctx, petId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPetTagPairsByPetId", reflect.TypeOf((*MockPetRepository)(nil).GetPetTagPairsByPetId), ctx, petId)
}

// GetPetsByStatus mocks base method.
func (m *MockPetRepository) GetPetsByStatus(ctx context.Context, petStatus string) ([]entities.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPetsByStatus", ctx, petStatus)
	ret0, _ := ret[0].([]entities.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPetsByStatus indicates an expected call of GetPetsByStatus.
func (mr *MockPetRepositoryMockRecorder) GetPetsByStatus(ctx, petStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPetsByStatus", reflect.TypeOf((*MockPetRepository)(nil).GetPetsByStatus), ctx, petStatus)
}

// GetPhotoUrlsByPetId mocks base method.
func (m *MockPetRepository) GetPhotoUrlsByPetId(ctx context.Context, petId int) ([]entities.PhotoUrl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhotoUrlsByPetId", ctx, petId)
	ret0, _ := ret[0].([]entities.PhotoUrl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPhotoUrlsByPetId indicates an expected call of GetPhotoUrlsByPetId.
func (mr *MockPetRepositoryMockRecorder) GetPhotoUrlsByPetId(ctx, petId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhotoUrlsByPetId", reflect.TypeOf((*MockPetRepository)(nil).GetPhotoUrlsByPetId), ctx, petId)
}

// GetTagById mocks base method.
func (m *MockPetRepository) GetTagById(ctx context.Context, tagId int) (entities.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagById", ctx, tagId)
	ret0, _ := ret[0].(entities.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagById indicates an expected call of GetTagById.
func (mr *MockPetRepositoryMockRecorder) GetTagById(ctx, tagId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagById", reflect.TypeOf((*MockPetRepository)(nil).GetTagById), ctx, tagId)
}

// GetTagByName mocks base method.
func (m *MockPetRepository) GetTagByName(ctx context.Context, tagName string) (entities.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagByName", ctx, tagName)
	ret0, _ := ret[0].(entities.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagByName indicates an expected call of GetTagByName.
func (mr *MockPetRepositoryMockRecorder) GetTagByName(ctx, tagName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagByName", reflect.TypeOf((*MockPetRepository)(nil).GetTagByName), ctx, tagName)
}

// UpdatePet mocks base method.
func (m *MockPetRepository) UpdatePet(ctx context.Context, pet entities.Pet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePet", ctx, pet)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePet indicates an expected call of UpdatePet.
func (mr *MockPetRepositoryMockRecorder) UpdatePet(ctx, pet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePet", reflect.TypeOf((*MockPetRepository)(nil).UpdatePet), ctx, pet)
}

// MockStoreRepository is a mock of StoreRepository interface.
type MockStoreRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStoreRepositoryMockRecorder
}

// MockStoreRepositoryMockRecorder is the mock recorder for MockStoreRepository.
type MockStoreRepositoryMockRecorder struct {
	mock *MockStoreRepository
}

// NewMockStoreRepository creates a new mock instance.
func NewMockStoreRepository(ctrl *gomock.Controller) *MockStoreRepository {
	mock := &MockStoreRepository{ctrl: ctrl}
	mock.recorder = &MockStoreRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreRepository) EXPECT() *MockStoreRepositoryMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockStoreRepository) CreateOrder(ctx context.Context, order entities0.Order) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, order)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockStoreRepositoryMockRecorder) CreateOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockStoreRepository)(nil).CreateOrder), ctx, order)
}

// DeleteOrder mocks base method.
func (m *MockStoreRepository) DeleteOrder(ctx context.Context, orderId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", ctx, orderId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockStoreRepositoryMockRecorder) DeleteOrder(ctx, orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockStoreRepository)(nil).DeleteOrder), ctx, orderId)
}

// GetOrderById mocks base method.
func (m *MockStoreRepository) GetOrderById(ctx context.Context, orderId int) (entities0.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderById", ctx, orderId)
	ret0, _ := ret[0].(entities0.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderById indicates an expected call of GetOrderById.
func (mr *MockStoreRepositoryMockRecorder) GetOrderById(ctx, orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderById", reflect.TypeOf((*MockStoreRepository)(nil).GetOrderById), ctx, orderId)
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(ctx context.Context, user entities1.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), ctx, user)
}

// DeleteUser mocks base method.
func (m *MockUserRepository) DeleteUser(ctx context.Context, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserRepositoryMockRecorder) DeleteUser(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserRepository)(nil).DeleteUser), ctx, username)
}

// GetUserByUsername mocks base method.
func (m *MockUserRepository) GetUserByUsername(ctx context.Context, username string) (entities1.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, username)
	ret0, _ := ret[0].(entities1.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockUserRepositoryMockRecorder) GetUserByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockUserRepository)(nil).GetUserByUsername), ctx, username)
}

// UpdateUser mocks base method.
func (m *MockUserRepository) UpdateUser(ctx context.Context, user entities1.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserRepositoryMockRecorder) UpdateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepository)(nil).UpdateUser), ctx, user)
}
