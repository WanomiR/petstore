basePath: /
definitions:
  entities.Category:
    properties:
      id:
        type: integer
      name:
        example: cat
        type: string
    type: object
  entities.Inventory:
    additionalProperties:
      type: integer
    type: object
  entities.Pet:
    properties:
      category:
        $ref: '#/definitions/entities.Category'
      id:
        type: integer
      name:
        example: doggy
        type: string
      photoUrls:
        items:
          type: string
        type: array
      status:
        description: available | pending | sold
        example: available
        type: string
      tags:
        items:
          $ref: '#/definitions/entities.Tag'
        type: array
    required:
    - category
    - name
    - status
    type: object
  entities.Tag:
    properties:
      id:
        type: integer
      name:
        example: fluffy
        type: string
    type: object
  entities.User:
    properties:
      email:
        example: johndoe@example.com
        type: string
      firstName:
        example: John
        type: string
      id:
        type: integer
      lastName:
        example: Doe
        type: string
      password:
        example: "123456"
        type: string
      phone:
        example: 7-999-999-99-99
        type: string
      userStatus:
        example: 0
        type: integer
      username:
        example: johndoe001
        type: string
    required:
    - password
    - username
    type: object
  rr.JSONResponse:
    properties:
      data: {}
      error:
        type: boolean
      message:
        type: string
    type: object
host: localhost:8888
info:
  contact: {}
  description: Petstore API implementation
  title: Petstore
  version: 1.0.0
paths:
  /pet:
    post:
      consumes:
      - application/json
      description: Add a new pet to the store
      parameters:
      - description: Pet object that needs to be added to the store
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entities.Pet'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rr.JSONResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rr.JSONResponse'
      security:
      - ApiKeyAuth: []
      summary: create pet
      tags:
      - pet
    put:
      consumes:
      - application/json
      description: Update an existing pet
      parameters:
      - description: Pet object that needs to be added to the store
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entities.Pet'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rr.JSONResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rr.JSONResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rr.JSONResponse'
      security:
      - ApiKeyAuth: []
      summary: update pet
      tags:
      - pet
  /pet/{petId}:
    delete:
      description: Deletes a pet
      parameters:
      - description: Pet ID
        in: path
        name: petId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rr.JSONResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rr.JSONResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rr.JSONResponse'
      security:
      - ApiKeyAuth: []
      summary: delete pet
      tags:
      - pet
    get:
      description: Find pet by ID
      parameters:
      - description: Pet ID
        in: path
        name: petId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Pet'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rr.JSONResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rr.JSONResponse'
      security:
      - ApiKeyAuth: []
      summary: get pet by id
      tags:
      - pet
    post:
      description: Updates a pet in the store with form data
      parameters:
      - description: Pet ID
        in: path
        name: petId
        required: true
        type: integer
      - description: Pet name
        in: formData
        name: name
        type: string
      - description: Pet status
        in: formData
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rr.JSONResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rr.JSONResponse'
      security:
      - ApiKeyAuth: []
      summary: update pet
      tags:
      - pet
  /pet/{petId}/uploadImage:
    post:
      description: Uploads an image
      parameters:
      - description: Pet ID
        in: path
        name: petId
        required: true
        type: integer
      - description: Additional data to pass to server
        in: formData
        name: additionalMetadata
        type: string
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rr.JSONResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rr.JSONResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rr.JSONResponse'
      security:
      - ApiKeyAuth: []
      summary: upload image
      tags:
      - pet
  /pet/findByStatus:
    get:
      description: Finds pets by status
      parameters:
      - collectionFormat: csv
        description: 'Status values that need to be considered for filter<br>Available
          values : <i>available, pending, sold</i>'
        in: query
        items:
          type: string
        name: status
        required: true
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Pet'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rr.JSONResponse'
      security:
      - ApiKeyAuth: []
      summary: get pets by status
      tags:
      - pet
  /store/inventory:
    get:
      description: Returns pet inventories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Inventory'
      security:
      - ApiKeyAuth: []
      summary: get inventory
      tags:
      - store
  /user:
    post:
      consumes:
      - application/json
      description: Create user
      parameters:
      - description: User object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entities.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/rr.JSONResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rr.JSONResponse'
      summary: create user
      tags:
      - user
  /user/{username}:
    delete:
      description: Delete user
      parameters:
      - description: The name that needs to be deleted
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rr.JSONResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rr.JSONResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rr.JSONResponse'
      summary: delete user
      tags:
      - user
    get:
      description: Get user by username
      parameters:
      - description: The name that needs to be fetched
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rr.JSONResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rr.JSONResponse'
      summary: get user
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Updated user
      parameters:
      - description: Name that need to be updated
        in: path
        name: username
        required: true
        type: string
      - description: Updated user object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entities.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rr.JSONResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rr.JSONResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rr.JSONResponse'
      summary: update user
      tags:
      - user
  /user/createWithArray:
    post:
      consumes:
      - application/json
      description: Create list of users with given input array
      parameters:
      - description: List of user objects
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/entities.User'
          type: array
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/rr.JSONResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rr.JSONResponse'
      summary: create with array
      tags:
      - user
  /user/login:
    get:
      description: Log user into the system
      parameters:
      - description: The username for login
        in: query
        name: username
        required: true
        type: string
      - description: The password for login in clear text
        in: query
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rr.JSONResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rr.JSONResponse'
      summary: login
      tags:
      - user
  /user/logout:
    get:
      description: Logs out currently logged user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rr.JSONResponse'
      summary: logout
      tags:
      - user
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
